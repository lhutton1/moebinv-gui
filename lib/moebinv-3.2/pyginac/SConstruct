import os
import sys

optimize_flags = ['-g']
# optimize_flags = ['-O2']

base = Environment( CCFLAGS=['-pipe'] + optimize_flags,
#	LINKFLAGS=['-Wl,--warn-once'],
	LINKFLAGS=[''],
	LIBS = ['boost_python', 'ginac', 'python2.7', 'cln'],
	ENV = os.environ,
	CPPPATH=['include', '/usr/include/python2.7'],
	)

if "linux" in sys.platform:
	base.Append( LINKFLAGS=['-Wl,--version-script=linux-symbols.map',
		'-Wl,-no-undefined'])
if not '-g' in optimize_flags:
	base.Append( LINKFLAGS='-s')
	
SetOption( "implicit_cache", 1)
EnsurePythonVersion( 2, 2)

# Set the warning level
base.Append( CCFLAGS=['-Wall', '-W', '-Wsign-compare', '-Wconversion',
	'-std=c++14', '-Wdisabled-optimization', '-pedantic',
	# For some reason, GiNaC::ex fails an Assignable test at a point of
	# instantiating a std::vector< GiNaC::ex>
	# '-D_GLIBCPP_CONCEPT_CHECKS',
	
	# Disable the unused parameter warnings that come from the Boost.Python
	# headers.
	'-Wno-unused-parameter'] )

# Build the C++ extension module.
target = base.SharedLibrary( 
	target="site-packages/cginac",
	source=[ 
		"src/basic.cpp",
		"src/constant.cpp",
		"src/ex.cpp",
		"src/exprseq.cpp",
		"src/expairseq.cpp",
		# "src/expair.cpp", # This doesn't appear to be an external interface object
		"src/idx.cpp",
		"src/lst.cpp",
		"src/map_function.cpp",
		"src/matrix.cpp",
		"src/ncmul.cpp",
		"src/normal.cpp",
		"src/numeric.cpp",
		"src/pyginacmodule.cpp",
		"src/relational.cpp",
		"src/symbol.cpp",
		"src/integral.cpp",
		"src/power.cpp",
		"src/flags.cpp",
		"src/exmap.cpp",
		"src/series.cpp",
		"src/tensor.cpp",
	        "src/symmetry.cpp",
		"src/wildcard.cpp",
		"src/clifford.cpp"],
	SHLIBPREFIX="")

Default(target)
