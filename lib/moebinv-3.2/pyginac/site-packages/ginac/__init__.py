from cginac import *
import cginac

def evalf( expr, *args, **kwargs):
    return expr.evalf(*args, **kwargs)

def eval( expr, *args, **kwargs):
    return expr.eval(*args, **kwargs)

def evalm( expr, *args, **kwargs):
    return expr.evalm(*args, **kwargs)

def denom( expr):
    return expr.denom()

def numer( expr):
    return expr.numer()

def inverse( expr):
    return expr.inverse()

def normal( expr):
    return expr.normal()

def expand( expr, *args, **kwargs):
    return expr.expand( *args, **kwargs)

def conjugate( expr):
    return expr.conjugate()

def coeff( expr, *args, **kwargs):
    return expr.coeff( *args, **kwargs)

def has( expr, *args, **kwargs):
    return expr.has( *args, **kwargs)

def find( expr, *args, **kwargs):
    return expr.find( *args, **kwargs)

def degree( expr, *args, **kwargs):
    return expr.degree( *args, **kwargs)

def ldegree( expr, *args, **kwargs):
    return expr.ldegree( *args, **kwargs)

def numer_denom( expr):
    return expr.numer_denom()

def to_rational( expr, *args, **kwargs):
    return expr.to_rational( *args, **kwargs)

def to_polynomial( expr, *args, **kwargs):
    return expr.to_polynomial( *args, **kwargs)

def collect( expr, *args, **kwargs):
    return expr.collect( *args, **kwargs)

def eval_integ(expr):
    return expr.eval_integ()

def diff( expr, *args, **kwargs):
    return expr.diff( *args, **kwargs)

def series( expr, *args, **kwargs):
    return expr.series( *args, **kwargs)

def match( expr, *args, **kwargs):
    return expr.match( *args, **kwargs)

def subs( expr, *args, **kwargs):
    return expr.subs( *args, **kwargs)

def lhs( expr):
    return expr.lhs

def rhs( expr):
    return expr.rhs

def simplify_indexed( expr, *args, **kwargs):
    return expr.simplify_indexed(*args, **kwargs)

def symmetrize( expr, *args, **kwargs):
    return expr.symmetrize(*args, **kwargs)

def antisymmetrize( expr, *args, **kwargs):
    return expr.antisymmetrize(*args, **kwargs)

def symmetrize_cyclic( expr, *args, **kwargs):
    return expr.symmetrize_cyclic(*args, **kwargs)

def lsolve( *args, **kwargs):
    """Solve a system of equations (a wrapper around matrix.solve())
        lsolve( [equations], [symbols]) -> { symbol_N : result_N, ...} """
    ret_list = cginac.lsolve( *args, **kwargs)
    ret = {}
    for item in ret_list:
        ret[item.lhs] = item.rhs
    return ret

def sqrt(x):
    return x**numeric(1, 2)

# Support the copy module's copy protocol
def _pyginac_copy( obj):
    return obj.__class__(obj)

basic.__copy__ = _pyginac_copy

scope = locals()
for name in ['subs', 'match', 'series', 'diff', 'eval_integ', 'collect',
    'to_polynomial', 'to_rational', 'numer_denom', 'degree', 'ldegree',
    'find', 'has', 'coeff', 'conjugate', 'expand', 'normal', 'numer', 
    'denom', 'evalm', 'eval', 'evalf', 'simplify_indexed',
    'symmetrize', 'antisymmetrize', 'symmetrize_cyclic']:
    scope[name].__doc__ = basic.__dict__[name].__doc__

del scope, name
