To compile cycle and figure support for pyGiNaC do the following:

1) Change the directory to pyginac and type "scons". If it will not
   report (after a while) "scons: done building targets."  then read
   INSTALL in this directory, you may be missing some dependencies.

2) Change the directory to pycycle and type "scons" again, hopefully
   you will be reported "scons: done building targets."  this time.

   If you still have errors, make sure that cycle.h and figure.h are
   within the include search path. If necessary, edit SConstruct
   to expand paths accordingly.  Alternatively, copy (or link) the
   header files to pyginac/include folder.

   Also, make sure that libcycle.so and libfigure.so are within LIB
   search path. If necessary edit SConstruct.lib to expand linker path
   accordingly.  Alternatively, copy (or link) the library files to
   pyginac/site-packages folder.

3) If compilation was successful, then check it by starting Python
   shell from the wrapper:

$ ./run python

   Then, from the Python shell try some commands, e.g. the sample
   script shown at the end of this file (if you have some errors see
   the next step).  You may call the similar code running the command:

$ ./run python examples/hello-figure.py

   For interactive usage, it is better to run some wrapper of Python,
   e.g. iPython, idle or pyzo. In the case of iPython the above
   example shall look like:

$ ./run ipython


4) If Python reports errors, check that the following libraries:

   libcycle.so
   libfigure.so
   cginac.so
   ccycle.so
   cfigure.so

   are all within LD_LIBRARY_PATH. If necessary, edit ./run file to
   expand the scope of LD_LIBRARY_PATH variable accordingly.
   Alternatively, copy (or link) the above libraries files to
   pyginac/site-packages folder.

#################################################
from cginac import *
from ccycle import *
from cfigure import *
F=figure()
A=F.add_point(1,1,"A")
B=F.add_point(-1,.5,"B")
a=F.add_cycle_rel([is_orthogonal(A),is_orthogonal(B),is_orthogonal(F.real_line)],"a")
b=F.add_cycle_rel([is_orthogonal(A),is_orthogonal(B),is_orthogonal(F.infinity)],"b")
F.asy_write()
